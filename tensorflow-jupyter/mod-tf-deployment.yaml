apiVersion: apps/v1
kind: Deployment
metadata:
  name: tensorflow-jupyter
spec:
  strategy:
    type: Recreate
  # Replicas controls the number of instances of the Pod to maintain running at all times
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: tensorflow-jupyter
  template:
    metadata:
      labels:
        app.kubernetes.io/name: tensorflow-jupyter
    spec:
      containers:
        - name: tf
          image: tensorflow/tensorflow:2.2.2-gpu-py3-jupyter

          ports:
            - name: notebook
              containerPort: 8888
              protocol: TCP

          readinessProbe:
            tcpSocket:
              port: notebook
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /
              port: notebook
            initialDelaySeconds: 15
            periodSeconds: 15
            failureThreshold: 3
            timeoutSeconds: 10

          volumeMounts:
            - name: storage
              mountPath: /tf/notebooks

          resources:
            limits:
              cpu: 15
              memory: 128Gi
              nvidia.com/gpu: 4

      # Node affinity can be used to require / prefer the Pods to be scheduled on a node with a specific hardware type
      # No affinity allows scheduling on all hardware types that can fulfill the resource request.
      # In this example, without affinity, any NVIDIA GPU would be allowed to run the Pod.
      # Read more about affinity at: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: gpu.nvidia.com/class
                operator: In
                values:
                  - Tesla_V100_NVLINK
      volumes:
        - name: storage
          persistentVolumeClaim:
            claimName: jupyter-pv-claim
      restartPolicy: Always
